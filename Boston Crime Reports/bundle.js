(function (React$1,d3,topojson,ReactDOM) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;

  const jsonUrl = 'https://gist.githubusercontent.com/GeniXiong/40c876429f659272241418eca00400df/raw/1ac290ae457fb8f947f4789cbc46fbbd43113f24/neighborhoods_json.json';

  const useBostonMap = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      d3.json(jsonUrl).then(topology => {
        setData({
          land: topology
        });
      });
    }, []);

    return data;
  };

  const csvUrl =
    'https://gist.githubusercontent.com/GeniXiong/543400f47d4b937a6379a9105e70c47f/raw/134f056de16d5bb6a3277e319f21261b8dfdb8c5/boston_crime_incident_reports.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);
    
    const ucr_dict = {'Part One':1, 'Part Two': 2, 'Part Three': 3, 'Other': 0, '':0};

    React$1.useEffect(() => {
      const row = d => {
        d.lat = +d.Lat;
        d.lng = +d.Long;
        d.date = new Date(d.OCCURRED_ON_DATE);
        d.shooting = +d.SHOOTING;
        d.ucr = ucr_dict[d.UCR_PART];
        d.offense_group = d.OFFENSE_CODE_GROUP;
        d.report = 1;

        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);

    // console.log(data);
    return data;
  };

  const Marks = ({ map , data, path, projection, colorScale, colorValue, sizeValue}) => (
    React.createElement( 'g', { className: "marks" },
      React$1.useMemo(
        ()=>(
          React.createElement( React.Fragment, null,
            map.features.map(feature => (
        
        		React.createElement( 'path', { className: "land", d: path(feature) })
      ))
          )
          ),
        [path, map]
          ),

      
      
      data.map(d => {
        const [x, y] = projection([d.lng, d.lat]);
        return React.createElement( 'circle', { cx: x, cy: y, r: sizeValue, fill: colorScale(colorValue(d)) })
      })
    )
  );

  const BubbleMap = ({ map, data, width, height, colorScale, colorValue }) => {
    
    
  	const projection = React$1.useMemo(
      () => d3.geoAlbers()
  	.scale( 100000 )
  	.rotate( [71.057,0] )
  	.center( [0.13, 42.33] )
  	.translate( [width/2,height/2] ),
      [width, height]);
  	const path = React$1.useMemo(
      () => d3.geoPath()
  	.projection( projection ),
    [projection]);

    return (
      React$1__default.createElement( Marks, {
        map: map.land, data: data, path: path, projection: projection, colorScale: colorScale, colorValue: colorValue, sizeValue: 3 })
    );
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickValue
        )
      )
    ));

  const Marks$1 = ({
    binnedData,
    xScale,
    yScale,
    tooltipFormat,
    innerHeight
  }) =>
    binnedData.map(d => (

        React.createElement( 'rect', {
          className: "mark", x: xScale(d.x0), y: yScale(d.y), width: xScale(d.x1) - xScale(d.x0) - 5, height: innerHeight - yScale(d.y) },
          React.createElement( 'title', null, tooltipFormat(d.y) )
        )


    ));

  const margin = { top: 0, right: 30, bottom: 20, left: 45 };
  const xAxisLabelOffset = 54;
  const yAxisLabelOffset = 30;

  const DateHistogram = ({
    data,
    width,
    height,
    setBrushExtent,
    xValue
  }) => {
    const xAxisLabel = 'Time';

    const yValue = d => d.report;
    const yValue2 = d => d.shooting;
    const yAxisLabel = 'Total Crime Incident Reports';

    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;

    const xAxisTickFormat = d3.timeFormat('%m/%d/%Y');

    const xScale = React$1.useMemo(
      () => d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice(),
      [data, xValue, innerWidth]);

    

    const binnedData = React$1.useMemo(() => {
      
      return d3.histogram()
      .value(xValue)
      .domain(xScale.domain())
    	.thresholds(7)(data)
      // .thresholds(timeMonths(start, stop))(data)
      .map(array => ({
        y: d3.sum(array, yValue),
        y2: d3.sum(array, yValue2),
        x0: array.x0,
        x1: array.x1
      }));
    }, [xValue, xScale, yValue, yValue2 ]);

    const yScale = React$1.useMemo(
      () => d3.scaleLinear()
      .domain([0, d3.max(binnedData, d => d.y)])
      .range([innerHeight, 0]),
      [binnedData, innerHeight]);
    
    // const yScale2 = scaleLinear()
    //   .domain([0, max(binnedData, d => d.y2)])
    //   .range([innerHeight, 0]);

    const brushRef = React$1.useRef();

    React$1.useEffect(() => {
      const brush = d3.brushX().extent([[0, 0], [innerWidth, innerHeight]]);
      brush(d3.select(brushRef.current));
      brush.on('brush end', () => {
        setBrushExtent(d3.event.selection && d3.event.selection.map(xScale.invert));
      });
    }, [innerWidth, innerHeight]);

    return (
      React.createElement( React.Fragment, null,
        React.createElement( 'rect', { width: width, height: height, fill: "white" }),
        React.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
            2}) rotate(-90)` },
            yAxisLabel
          ),
          React.createElement( AxisLeft, { yScale: yScale, innerWidth: innerWidth, tickOffset: 5 }),
          React.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
            xAxisLabel
          ),
          React.createElement( Marks$1, {
            binnedData: binnedData, xScale: xScale, yScale: yScale, tooltipFormat: d => d, circleRadius: 2, innerHeight: innerHeight }),
          React.createElement( 'g', { ref: brushRef })
        )
      )
    );
  };

  const ColorLegend = ({
    colorScale,
    tickSpacing = 30,
    tickSize = 10,
    tickTextOffset = 30,

  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "legendTick", transform: `translate(0,${i * tickSpacing})` },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" }, "Part ", domainValue
        )
      )
    ));

  const width = 960;
  const height = 500;
  // const height = 500 - menuHeight;
  const margin$1 = { top: 20, right: 200, bottom: 20, left: 20 };
  const innerHeight = height - margin$1.top - margin$1.bottom;
  const innerWidth = width - margin$1.left - margin$1.right;
  const dateHistogramSize = 0.2;

  const xValue = d => d.date;

  const App = () => {
    const bostonMap = useBostonMap();
    const data = useData();
    const [brushExtent, setBrushExtent] = React$1.useState();

    if (!bostonMap || !data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const filteredData = brushExtent ? data.filter(d => {
      const date = xValue(d);
      return date > brushExtent[0] && date < brushExtent[1];
    }) : data;
    
    const colorLegendLabel='Uniform Crime Report';
  	const circleRadius = 8;
    const colorValue = d => d.ucr;
    const colorScale = d3.scaleOrdinal(d3.schemeTableau10)
        // .range(["#98abc5", "#a05d56", "#ff8c00", "#d0743c"])
        .domain(data.map(colorValue));

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin$1.left}, ${margin$1.top})` },
          React$1__default.createElement( BubbleMap, { 
            map: bostonMap, data: filteredData, width: width, height: (1-dateHistogramSize) * innerHeight, colorScale: colorScale, colorValue: colorValue }),
          
          React$1__default.createElement( 'g', { transform: `translate(0, ${innerHeight-dateHistogramSize * innerHeight})` },
            React$1__default.createElement( DateHistogram, {
              data: data, width: width-2 * margin$1.left, height: dateHistogramSize * innerHeight, setBrushExtent: setBrushExtent, xValue: xValue })
          ),
          
          React$1__default.createElement( 'g', { transform: `translate(${innerWidth}, 100)` },
            React$1__default.createElement( 'text', { x: 35, y: -25, className: "legend label", textAnchor: "middle" },
              colorLegendLabel
            ),
            React$1__default.createElement( ColorLegend, {
              tickSpacing: 20, tickSize: 10, tickTextOffset: 12, tickSize: circleRadius, colorScale: colorScale })
        	)
        )
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React,d3,topojson,ReactDOM));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,