(function (React$1,d3,ReactDOM,ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && ReactDropdown.hasOwnProperty('default') ? ReactDropdown['default'] : ReactDropdown;

  const csvUrl =
    'https://gist.githubusercontent.com/GeniXiong/e7c6bf03262966c543faa26805bf8bc7/raw/8d7be05b386eb3ad482510c99f72a49fe48e2197/seattleHousePrice2015.csv';

  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
        d.price = +d.price/1000000;
        d.bedrooms = +d.bedrooms;
        d.bathrooms = +d.bathrooms;
        d.bed_bath_ratio = d.bedrooms/d.bathrooms;
        d.floors = +d.floors;
        d.sqft_basement = +d.sqft_basement/1000;
        d.year_built = +d.year_built;
        d.year_renovated = +d.year_renovated;
        d.sqft_living = +d.sqft_living;
        d.zipcode = d.zipcode;
        d.lat = +d.lat;
        d.long = +d.long;
        d.sqft_lot = +d.sqft_lot;
        return d;
      };
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', {
        className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + tickOffset },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale, innerWidth, tickFormat,tickOffset = 3 }) =>
    yScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", transform: `translate(0,${yScale(tickValue)})` },
        React.createElement( 'line', { x2: innerWidth }),
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -tickOffset, dy: ".32em" },
          tickFormat(tickValue)
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    colorScale,
    colorValue,
    tooltipFormat,
    circleRadius
  }) =>
    data.map(d => (
      React.createElement( 'circle', {
        className: "mark", cx: xScale(xValue(d)), cy: yScale(yValue(d)), fill: colorScale(colorValue(d)), r: circleRadius },
        React.createElement( 'title', null, tooltipFormat(xValue(d)) )
      )
    ));

  const ColorLegend = ({
    colorScale,
    tickSpacing = 30,
    tickSize = 10,
    tickTextOffset = 20,

  }) =>
    colorScale.domain().map((domainValue, i) => (
      React.createElement( 'g', {
        className: "tick", transform: `translate(0,${i * tickSpacing})` },
        React.createElement( 'circle', { fill: colorScale(domainValue), r: tickSize }),
        React.createElement( 'text', { x: tickTextOffset, dy: ".32em" },
          domainValue
        )
      )
    ));

  const width = 960;
  const menuHeight = 90;
  // const height = 500;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 200, bottom: 70, left: 90 };
  const xAxisLabelOffset = 60;
  const yAxisLabelOffset = 45;
  const circleRadius = 3;


  const attributes = [
    { value: 'year_built', label: 'Year Built' },
    { value: 'year_renovated', label: 'Year Renovated' },
    { value: 'price', label: 'Price (million)' },
    { value: 'sqft_living', label: 'Living(ksqft)' },
    { value: 'floors', label: 'Floors' },
    { value: 'sqft_basement', label: 'Basement(ksqft)' },
    { value: 'sqft_lot', label: 'Parking(ksqft)' },
    { value: 'bed_bath_ratio', label: 'Bed Bath Ratio' }
  ];

  const xAttributes = [
    { value: 'year_built', label: 'Year Built' },
    { value: 'year_renovated', label: 'Year Renovated' },
  ];

  const yAttributes = [
    { value: 'price', label: 'Price (million)' },
    { value: 'sqft_living', label: 'Living(ksqft)' },
    { value: 'sqft_basement', label: 'Basement(ksqft)' },
    { value: 'sqft_lot', label: 'Parking(ksqft)' }
  ];

  const getLabel = value => {
    for (let i = 0; i < attributes.length; i++) {
      if (attributes[i].value === value) {
        return attributes[i].label;
      }
    }
  };

  const App = () => {
    const data = useData();

    const initialXAttribute = 'year_built';
    const [xAttribute, setXAttribute] = React$1.useState(initialXAttribute);
    const xValue = d => d[xAttribute];
    const xAxisLabel = getLabel(xAttribute);

    const initialYAttribute = 'price';
    const [yAttribute, setYAttribute] = React$1.useState(initialYAttribute);
    const yValue = d => d[yAttribute];
    const yAxisLabel = getLabel(yAttribute);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
    const colorValue = d => d.floors;
      const colorScale = d3.scaleOrdinal(d3.schemeSet2)
      .domain(data.map(colorValue));
    // const colorScale = scaleOrdinal(schemePastel2)
    //   .domain(data.map(colorValue))
    //   .range(['#E6842A', '#137B80', '#8E6C8A']);
    const colorLegendLabel = 'Floors';

    console.log(data);
    const innerHeight = height - margin.top - margin.bottom;
    const innerWidth = width - margin.left - margin.right;
    const xAxisTickFormat = d3.format('');

    
    const xScale = d3.scaleLinear()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth])
      .nice();

    const yScale = d3.scaleLinear()
      .domain(d3.extent(data, yValue))
      .range([innerHeight, 0])
    	.nice();
    

    return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "X"),
          React$1__default.createElement( ReactDropdown, {
            options: xAttributes, value: xAttribute, onChange: ({ value }) => setXAttribute(value) }),
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Y"),
          React$1__default.createElement( ReactDropdown, {
            options: yAttributes, value: yAttribute, onChange: ({ value }) => setYAttribute(value) })
        ),
        
        React$1__default.createElement( 'svg', { width: width, height: height },
          React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
            React$1__default.createElement( AxisBottom, {
              xScale: xScale, innerHeight: innerHeight, tickFormat: d3.format(''), tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" },
              xAxisLabel
            ),
            React$1__default.createElement( AxisLeft, { 
              yScale: yScale, innerWidth: innerWidth, tickFormat: d3.format('.2r'), tickOffset: 5 }),
            React$1__default.createElement( 'text', {
              className: "axis-label", textAnchor: "middle", transform: `translate(${-yAxisLabelOffset},${innerHeight /
              2}) rotate(-90)` },
              yAxisLabel
            ),
            
            React$1__default.createElement( Marks, {
              data: data, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, colorScale: colorScale, colorValue: colorValue, tooltipFormat: xAxisTickFormat, circleRadius: circleRadius })
          ),
          React$1__default.createElement( 'g', { transform: `translate(${innerWidth + 150}, 60)` },
            React$1__default.createElement( 'text', { x: 35, y: -25, className: "axis-label", textAnchor: "middle" },
              colorLegendLabel
            ),
            React$1__default.createElement( ColorLegend, {
              tickSpacing: 22, tickSize: 10, tickTextOffset: 12, tickSize: circleRadius, colorScale: colorScale })
        	)
        )
        
      )
    );
  };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React,d3,ReactDOM,ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,